<script>
  // @ts-nocheck

  import { onMount } from "svelte";

  let searchData = [];
  let length = "";
  let result = [];
  let pagenum = 0;
  let total_page;
  let page_count = 0;
  let currentPage = 1;
  let first_page = 1;
  let first_per_page = 1;
  let last_per_page = 15;
  let initial_count = 1;
  let items_per_page = 15;
  let isDropdownOpen = Array.from({ length: 17 }, () => false); // Array to store dropdown states

  function toggleDropdown(index) {
    isDropdownOpen[index] = !isDropdownOpen[index];
  }
  function toggleDropdownClose(index) {
    isDropdownOpen[index] = !isDropdownOpen[index];
  }
  async function fetchData(currentPage) {
    try {
      const response = await fetch("http://localhost:5000/search", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          page: currentPage,
          per_page: items_per_page,
          selected_checkboxes: selectedCheckboxes,
          enter_value: enterValue,
          enter_search_value: enterSearchValue
        }),
      });
      const data = await response.json();
      console.log(data, "datadata");
      searchData = data.data;
      console.log(searchData,"searchDatasearchData")
      length = data.total;
      result = data.result;
      console.log(result, "resultresult");
      total_page = Math.ceil(length / items_per_page);
      console.log(length, "total_counttotal_count");
      // console.log(searchData, "searchData");
    } catch (error) {
      console.error("Error fetching data:", error);
    }
  }

  onMount(() => {
    fetchData(currentPage);
  });

  function handlePrevious(total_page) {
    if (currentPage - 1 > 0) {
      pagenum = pagenum - 1;
      currentPage = currentPage - 1;
      console.log(currentPage, "currentPageprevious");
      fetchData(currentPage);
      if (total_page > 0 && total_page != 0 && first_per_page > 5) {
        if (first_per_page <= last_per_page) {
          first_per_page = first_per_page - items_per_page;
          last_per_page = last_per_page - items_per_page;
        }
      }
    }
  }

  function handleNext(total_page) {
    if (currentPage + 1 >= page_count && currentPage < total_page) {
      console.log("Next button clicked");
      pagenum = pagenum + 1;
      currentPage = currentPage + 1;
      console.log(currentPage, "currentPagecurrentPage");
      fetchData(currentPage);

      if (initial_count <= total_page) {
        if (first_per_page < last_per_page) {
          first_per_page = first_per_page + items_per_page;
          last_per_page = last_per_page + items_per_page;
        }
        initial_count = initial_count + 1;
      }
    }
  }
  function handleLast(total_page) {
    currentPage = total_page;
    fetchData(total_page);
  }
  function handleFirst() {
    currentPage = first_page;
    fetchData(first_page);
  }

  function convertToISO8601(textDate) {
    // Parse the input date string into a Date object
    const inputDate = new Date(textDate);

    // Format the Date object into the desired output format
    const outputDateString = `${inputDate.getUTCFullYear()}-${(inputDate.getUTCMonth() + 1).toString().padStart(2, "0")}-${inputDate.getUTCDate().toString().padStart(2, "0")} ${inputDate.getUTCHours().toString().padStart(2, "0")}:${inputDate.getUTCMinutes().toString().padStart(2, "0")}:${inputDate.getUTCSeconds().toString().padStart(2, "0")}`;

    return outputDateString;
  }

  const handleSearch = () => {
    fetchData(currentPage);
  };
  let selectedCheckboxes = {};
  
  // Function to handle checkbox selection
  function handleCheckboxSelection(column, value) {
    if (!selectedCheckboxes[column]) {
      selectedCheckboxes[column] = [];
    }

    const index = selectedCheckboxes[column].indexOf(value);
    if (index === -1) {
      selectedCheckboxes[column].push(value);
    } else {
      selectedCheckboxes[column].splice(index, 1);
    }
    fetchData(currentPage);
  }

  // Function to check if a checkbox is selected
  function isSelected(column, value) {
    return selectedCheckboxes[column] && selectedCheckboxes[column].includes(value);
  }

  let enterValue = {};

  function handleInputChange(columnName, userValue){
    enterValue[columnName] = userValue;
    fetchData(currentPage);
  }

  let enterSearchValue = {};

  function handleDistinctInput(columnName, userValue){
    enterSearchValue[columnName] = userValue;
    fetchData(currentPage);
  }
</script>

<div class="main-container">
  <div class="left-container">
    <h1>hai</h1>
  </div>
  <div class="right-container">
    <div class="inner-container">
      <div>{searchData.source_ip}</div>
      <div class="table-style">
        <table>
          <thead>
          <tr class="header-style">
            <th>
              <div class="header-align">
                <div class="ellipsis-fit" title="MSISDN">
                  MSISDN
                </div>
                <div class="filter-icon" on:click={() => toggleDropdown(1)}>
                  <img src="filter.svg" alt="">
                </div>                  
              </div>
            </th>                      
              <th>
                <div class="header-align">
                  <div class="ellipsis-fit" title="SOURCE IP">
                    SOURCE IP
                  </div>
                  <div class="filter-icon" on:click={() => toggleDropdown(2)}>
                    <img src="filter.svg" alt="">
                  </div>                  
                </div>
              </th>              
              <th>
                <div class="header-align">
                  <div class="ellipsis-fit" title="SOURCE PORT">
                    SOURCE PORT
                  </div>
                  <div class="filter-icon" on:click={() => toggleDropdown(3)}>
                    <img src="filter.svg" alt="">
                  </div>                  
                </div>
              </th>
              <th>
                <div class="header-align">
                  <div class="ellipsis-fit" title="OTHER IP">
                    OTHER IP
                  </div>
                  <div class="filter-icon" on:click={() => toggleDropdown(4)}>
                    <img src="filter.svg" alt="">
                  </div>                  
                </div>
              </th>
              <th>
                <div class="header-align">
                  <div class="ellipsis-fit" title="OTHER PORT">
                    OTHER PORT
                  </div>
                  <div class="filter-icon" on:click={() => toggleDropdown(5)}>
                    <img src="filter.svg" alt="">
                  </div>                  
                </div>
              </th>
              <th>
                <div class="header-align">
                  <div class="ellipsis-fit" title="CGID">
                    CGID
                  </div>
                  <div class="filter-icon" on:click={() => toggleDropdown(6)}>
                    <img src="filter.svg" alt="">
                  </div>                  
                </div>
              </th>
              <th>
                <div class="header-align">
                  <div class="ellipsis-fit" title="COMPANY">
                    COMPANY
                  </div>
                  <div class="filter-icon" on:click={() => toggleDropdown(7)}>
                    <img src="filter.svg" alt="">
                  </div>                  
                </div>
              </th>
              <th>
                <div class="header-align">
                  <div class="ellipsis-fit" title="DOMAIN">
                    DOMAIN
                  </div>
                  <div class="filter-icon" on:click={() => toggleDropdown(8)}>
                    <img src="filter.svg" alt="">
                  </div>                  
                </div>
              </th>
              <th>
                <div class="header-align">
                  <div class="ellipsis-fit" title="VPN">
                    VPN
                  </div>
                  <div class="filter-icon" on:click={() => toggleDropdown(9)}>
                    <img src="filter.svg" alt="">
                  </div>                  
                </div>
              </th>
              <th>
                <div class="header-align">
                  <div class="ellipsis-fit" title="START TIME">
                    START TIME
                  </div>
                  <div class="filter-icon" on:click={() => toggleDropdown(10)}>
                    <img src="filter.svg" alt="">
                  </div>                  
                </div>
              </th>
              <th>
                <div class="header-align">
                  <div class="ellipsis-fit" title="END TIME">
                    END TIME
                  </div>
                  <div class="filter-icon" on:click={() => toggleDropdown(11)}>
                    <img src="filter.svg" alt="">
                  </div>                  
                </div>
              </th>
              <th>
                <div class="header-align">
                  <div class="ellipsis-fit" title="DURATION">
                    DURATION
                  </div>
                  <div class="filter-icon" on:click={() => toggleDropdown(12)}>
                    <img src="filter.svg" alt="">
                  </div>                  
                </div>
              </th>
              <th>
                <div class="header-align">
                  <div class="ellipsis-fit" title="UP LINK">
                    UP LINK
                  </div>
                  <div class="filter-icon" on:click={() => toggleDropdown(13)}>
                    <img src="filter.svg" alt="">
                  </div>                  
                </div>
              </th>
              <th>
                <div class="header-align">
                  <div class="ellipsis-fit" title="DOWN LINK">
                    DOWN LINK
                  </div>
                  <div class="filter-icon" on:click={() => toggleDropdown(14)}>
                    <img src="filter.svg" alt="">
                  </div>                  
                </div>
              </th>
              <th>
                <div class="header-align">
                  <div class="ellipsis-fit" title="IP TYPE">
                    IP TYPE
                  </div>
                  <div class="filter-icon" on:click={() => toggleDropdown(15)}>
                    <img src="filter.svg" alt="">
                  </div>                  
                </div>
              </th>
              <th>
                <div class="header-align">
                  <div class="ellipsis-fit" title="HOME CIRCLE">
                    HOME CIRCLE
                  </div>
                  <div class="filter-icon" on:click={() => toggleDropdown(16)}>
                    <img src="filter.svg" alt="">
                  </div>                  
                </div>
              </th>
              <th>
                <div class="header-align">
                  <div class="ellipsis-fit" title="PROVIDER">
                    PROVIDER
                  </div>
                  <div class="filter-icon" on:click={() => toggleDropdown(17)}>
                    <img src="filter.svg" alt="">
                  </div>                  
                </div>
              </th>
          </tr>
            <tr>
              <td>  
                <input type="search" on:input={() => handleInputChange('msisdn', event.target.value)} />   
              {#if isDropdownOpen[1]}
                <div style="position: absolute;">    
                  <div on:click={() => toggleDropdownClose(1)} style="cursor:pointer; display: flex; justify-content: flex-end;">
                    <img src="close.svg" alt="close">
                  </div>
                    <input
                    type="search"
                    on:input={() => handleDistinctInput('msisdn', event.target.value)}
                  />
                  <div class="options-container">
                    <!-- {#each msisdn as msisdn_values}
                      <ul class="list-style">
                        <li>
                          <input type="checkbox" on:change={() => handleCheckboxSelection('msisdn', msisdn_values)} checked={isSelected('msisdn', msisdn_values)}/>
                          {msisdn_values}
                        </li>
                      </ul>
                    {/each} -->
                  </div>
                </div>
              {/if}   
              </td>
              <td>
                <input type="search" on:input={() => handleInputChange('source_ip', event.target.value)} /> 
                <!-- {#if isDropdownOpen[2]}
                  <div style="position: absolute;">   
                    <div on:click={() => toggleDropdownClose(2)} style="cursor:pointer; display: flex; justify-content: flex-end;">
                      <img src="close.svg" alt="close">
                    </div>                
                    <input
                    type="search"
                    bind:value={searchParams1["source_ip"]}
                    on:input={handleSearch}
                  />
                    <div class="options-container">
                      {#each source_ip as source_ip_values}
                        <ul class="list-style">
                          <li>
                            <input type="checkbox" on:change={() => handleCheckboxSelection('source_ip', source_ip_values)}  />
                            {source_ip_values}
                          </li>
                        </ul>
                      {/each}
                    </div>
                  </div>
                {/if} -->
              </td>
              <td>
                <input type="search"> 
                <!-- {#if isDropdownOpen[3]}
                  <div style="position: absolute;">  
                    <div on:click={() => toggleDropdownClose(3)} style="cursor:pointer; display: flex; justify-content: flex-end;">
                      <img src="close.svg" alt="close">
                    </div>                   
                    <input
                    type="search"
                    bind:value={searchParams1["source_port"]}
                    on:input={handleSearch}
                  />
                    <div class="options-container">
                      {#each source_port as source_port_values}
                        <ul class="list-style">
                          <li>
                            <input type="checkbox" on:change={() => handleCheckboxSelection('source_port', source_port_values)}  />
                            {source_port_values}
                          </li>
                        </ul>
                      {/each}
                    </div>
                  </div>
                {/if} -->
              </td>
              <td>
                <input type="search"> 
                <!-- {#if isDropdownOpen[4]}
                  <div style="position: absolute;"> 
                    <div on:click={() => toggleDropdownClose(4)} style="cursor:pointer; display: flex; justify-content: flex-end;">
                      <img src="close.svg" alt="close">
                    </div>
                    <input
                    type="search"
                    bind:value={searchParams1["destination_ip"]}
                    on:input={handleSearch}
                  />
                    <div class="options-container">
                      {#each destination_ip as destination_ip_values}
                        <ul class="list-style">
                          <li>
                            <input type="checkbox" on:change={() => handleCheckboxSelection('destination_ip', destination_ip_values)}  />
                            {destination_ip_values}
                          </li>
                        </ul>
                      {/each}
                    </div>
                  </div>
                {/if} -->
              </td>
              <td>
                <input type="search"> 
                <!-- {#if isDropdownOpen[5]}
                  <div style="position: absolute;">   
                    <div on:click={() => toggleDropdownClose(5)} style="cursor:pointer; display: flex; justify-content: flex-end;">
                      <img src="close.svg" alt="close">
                    </div>                 
                    <input
                    type="search"
                    bind:value={searchParams1["destination_port"]}
                    on:input={handleSearch}
                  />
                    <div class="options-container">
                      {#each destination_port as destination_port_values}
                        <ul class="list-style">
                          <li>
                            <input type="checkbox" on:change={() => handleCheckboxSelection('destination_port', destination_port_values)}  />
                            {destination_port_values}
                          </li>
                        </ul>
                      {/each}
                    </div>
                  </div>
                {/if} -->
              </td>
              <td>
                <input type="search"> 
                <!-- {#if isDropdownOpen[6]}
                  <div style="position: absolute;">  
                    <div on:click={() => toggleDropdownClose(6)} style="cursor:pointer; display: flex; justify-content: flex-end;">
                      <img src="close.svg" alt="close">
                    </div>
                    <input
                      type="search"
                      bind:value={searchParams1["cell_id"]}
                      on:input={handleSearch}
                    />
                    <div class="options-container">
                      {#each cell_id as cell_id_values}
                        <ul class="list-style">
                          <li>
                            <input type="checkbox" on:change={() => handleCheckboxSelection('cell_id', cell_id_values)}  />
                            {cell_id_values}
                          </li>
                        </ul>
                      {/each}
                    </div>
                  </div>
                {/if} -->
              </td>
              <td>
                <input type="search"> 
                <!-- {#if isDropdownOpen[7]}
                  <div style="position: absolute;">    
                    <div on:click={() => toggleDropdownClose(7)} style="cursor:pointer; display: flex; justify-content: flex-end;">
                      <img src="close.svg" alt="close">
                    </div>                
                    <input
                    type="search"
                    bind:value={searchParams1["company"]}
                    on:input={handleSearch}
                  />
                    <div class="options-container">
                      {#each company as company_values}
                        <ul class="list-style">
                          <li>
                            <input type="checkbox" on:change={() => handleCheckboxSelection('company', company_values)}  />
                            {company_values}
                          </li>
                        </ul>
                      {/each}
                    </div>
                  </div>
                {/if} -->
              </td>
              <td>
                <input type="search"> 
                <!-- {#if isDropdownOpen[8]}
                  <div style="position: absolute;"> 
                    <div on:click={() => toggleDropdownClose(8)} style="cursor:pointer; display: flex; justify-content: flex-end;">
                      <img src="close.svg" alt="close">
                    </div>                  
                    <input
                    type="search"
                    bind:value={searchParams1["domain"]}
                    on:input={handleSearch}
                  />
                    <div class="options-container">
                      {#each domain as domain_values}
                        <ul class="list-style">
                          <li>
                            <input type="checkbox" on:change={() => handleCheckboxSelection('domain', domain_values)}  />
                            {domain_values}
                          </li>
                        </ul>
                      {/each}
                    </div>
                  </div>
                {/if} -->
              </td>
              <td>
                <input type="search"> 
                <!-- {#if isDropdownOpen[9]}
                  <div style="position: absolute;">
                    <div on:click={() => toggleDropdownClose(9)} style="cursor:pointer; display: flex; justify-content: flex-end;">
                      <img src="close.svg" alt="close">
                    </div>
                    <input
                      type="search"
                      bind:value={searchParams1["service"]}
                      on:input={handleSearch}
                    />
                    <div class="options-container">
                      {#each service as service_values}
                        <ul class="list-style">
                          <li>
                            <input type="checkbox" on:change={() => handleCheckboxSelection('service', service_values)}  />
                            {service_values}
                          </li>
                        </ul>
                      {/each}
                    </div>
                  </div>
                {/if} -->
              </td>
              <td>
                <input type="search"> 
                <!-- {#if isDropdownOpen[10]}
                  <div style="position: absolute;">
                    <div on:click={() => toggleDropdownClose(10)} style="cursor:pointer; display: flex; justify-content: flex-end;">
                      <img src="close.svg" alt="close">
                    </div>
                    <input
                      type="search"
                      bind:value={searchParams1["time"]}
                      on:input={handleSearch}
                    />
                    <div class="options-container">
                      {#each time as time_values}
                        <ul class="list-style">
                          <li>
                            <input type="checkbox" on:change={() => handleCheckboxSelection('time', time_values)}  />
                            {time_values}
                          </li>
                        </ul>
                      {/each}
                    </div>
                  </div>
                {/if} -->
              </td>
              <td>
                <input type="search"> 
                <!-- {#if isDropdownOpen[11]}
                  <div style="position: absolute;">
                    <div on:click={() => toggleDropdownClose(11)} style="cursor:pointer; display: flex; justify-content: flex-end;">
                      <img src="close.svg" alt="close">
                    </div>
                    <input
                    type="search"
                    bind:value={searchParams1["time_et"]}
                    on:input={handleSearch}
                  />
                    <div class="options-container">
                      {#each time_et as time_et_values}
                        <ul class="list-style">
                          <li>
                            <input type="checkbox" on:change={() => handleCheckboxSelection('time_et', time_et_values)}  />
                            {time_et_values}
                          </li>
                        </ul>
                      {/each}
                    </div>
                  </div>
                {/if} -->
              </td>
              <td>
                <input type="search"> 
                <!-- {#if isDropdownOpen[12]}
                  <div style="position: absolute;">  
                    <div on:click={() => toggleDropdownClose(12)} style="cursor:pointer; display: flex; justify-content: flex-end;">
                      <img src="close.svg" alt="close">
                    </div>
                    <input
                    type="search"
                    bind:value={searchParams1["duration"]}
                    on:input={handleSearch}
                  />
                    <div class="options-container">
                      {#each duration as duration_values}
                        <ul class="list-style">
                          <li>
                            <input type="checkbox" on:change={() => handleCheckboxSelection('duration', duration_values)}  />
                            {duration_values}
                          </li>
                        </ul>
                      {/each}
                    </div>
                  </div>
                {/if} -->
              </td>
              <td>
                <input type="search"> 
                <!-- {#if isDropdownOpen[13]}
                  <div style="position: absolute;"> 
                    <div on:click={() => toggleDropdownClose(13)} style="cursor:pointer; display: flex; justify-content: flex-end;">
                      <img src="close.svg" alt="close">
                    </div>
                    <input
                    type="search"
                    bind:value={searchParams1["uplink_vol"]}
                    on:input={handleSearch}
                  />
                    <div class="options-container">
                      {#each uplink_vol as uplink_vol_values}
                        <ul class="list-style">
                          <li>
                            <input type="checkbox" on:change={() => handleCheckboxSelection('uplink_vol', uplink_vol_values)}  />
                            {uplink_vol_values}
                          </li>
                        </ul>
                      {/each}
                    </div>
                  </div>
                {/if} -->
              </td>
              <td>
                <input type="search"> 
                <!-- {#if isDropdownOpen[14]}
                  <div style="position: absolute;">
                    <div on:click={() => toggleDropdownClose(14)} style="cursor:pointer; display: flex; justify-content: flex-end;">
                      <img src="close.svg" alt="close">
                    </div>
                    <input
                    type="search"
                    bind:value={searchParams1["downlink_vol"]}
                    on:input={handleSearch}
                  />
                    <div class="options-container">
                      {#each downlink_vol as downlink_vol_values}
                        <ul class="list-style">
                          <li>
                            <input type="checkbox" on:change={() => handleCheckboxSelection('downlink_vol', downlink_vol_values)}  />
                            {downlink_vol_values}
                          </li>
                        </ul>
                      {/each}
                    </div>
                  </div>
                {/if} -->
              </td>
              <td>
                <input type="search"> 
                <!-- {#if isDropdownOpen[15]}
                  <div style="position: absolute;">
                    <div on:click={() => toggleDropdownClose(15)} style="cursor:pointer; display: flex; justify-content: flex-end;">
                      <img src="close.svg" alt="close">
                    </div>   
                    <input
                    type="search"
                    bind:value={searchParams1["com_type"]}
                    on:input={handleSearch}
                  />
                    <div class="options-container">
                      {#each com_type as com_type_values}
                        <ul class="list-style">
                          <li>
                            <input type="checkbox" on:change={() => handleCheckboxSelection('com_type', com_type_values)}  />
                            {com_type_values}
                          </li>
                        </ul>
                      {/each}
                    </div>
                  </div>
                {/if} -->
              </td>
              <td>
                <input type="search"> 
                <!-- {#if isDropdownOpen[16]}
                  <div style="position: absolute;"> 
                    <div on:click={() => toggleDropdownClose(16)} style="cursor:pointer; display: flex; justify-content: flex-end;">
                      <img src="close.svg" alt="close">
                    </div>
                    <input
                    type="search"
                    bind:value={searchParams1["roaming"]}
                    on:input={handleSearch}
                  />
                    <div class="options-container">
                      {#each roaming as roaming_values}
                        <ul class="list-style">
                          <li>
                            <input type="checkbox" on:change={() => handleCheckboxSelection('roaming', roaming_values)}  />
                            {roaming_values}
                          </li>
                        </ul>
                      {/each}
                    </div>
                  </div>
                {/if} -->
              </td>
              <td>
                <input type="search"> 
                <!-- {#if isDropdownOpen[17]}
                  <div style="position: absolute;"> 
                    <div on:click={() => toggleDropdownClose(17)} style="cursor:pointer; display: flex; justify-content: flex-end;">
                      <img src="close.svg" alt="close">
                    </div>
                    <input
                      type="search"
                      bind:value={searchParams1["provider"]}
                      on:input={handleSearch}
                    />
                    <div class="options-container">
                      {#each provider as provider_values}
                        <ul class="list-style">
                          <li>
                            <input type="checkbox" on:change={() => handleCheckboxSelection('provider', provider_values)}  />
                            <label>{provider_values}</label>
                          </li>
                        </ul>
                      {/each}
                    </div>
                  </div>
                {/if} -->
              </td> 
            </tr>
          </thead>
          <tbody>
            {#each searchData as item, index}
              <tr>
                <td>{item.msisdn}</td>
                <td>{item.source_ip}</td>
                <td>{item.source_port}</td>
                <td>{item.destination_ip}</td>
                <td>{item.destination_port}</td>
                <td>{item.cell_id}</td>
                <td>{item.company}</td>
                <td>{item.domain}</td>
                <td>{item.service}</td>
                <td>{convertToISO8601(item.time)}</td>
                <td>{convertToISO8601(item.time_et)}</td>
                <td></td>
                <td>{item.uplink_vol}</td>
                <td>{item.downlink_vol}</td>
                <td>{item.com_type}</td>
                <td>{item.roaming}</td>
                <td>{item.provider}</td>
              </tr>
            {/each}
          </tbody>
        </table>
      </div>
      <div class="table-pagination">
        <div>
          <p>
            Total Page : {total_page}
          </p>
        </div>
        <div>
          <button
            type="button"
            class="button-primary"
            on:click={() => handleFirst()}>First</button
          >
          <button
            type="button"
            class="button-primary"
            on:click={() => handlePrevious(total_page)}>Previous</button
          >
          <button
            type="button"
            class="button-primary"
            style="margin-left:4px; margin-right:4px">{currentPage}</button
          >
          <button
            type="button"
            class="button-primary"
            on:click={() => handleNext(total_page)}
          >
            Next</button
          >
          <button
            type="button"
            class="button-primary"
            on:click={() => handleLast(total_page)}>Last</button
          >
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .main-container {
    width: 100%; /* Subtract 30px padding on each side */
    height: 100vh;
    display: flex;
    font-family: sans-serif;
  }
  .left-container {
    width: 7rem;
    height: 100vh;
    background-color: black;
  }
  .right-container {
    width: calc(100% - 7rem); /* Adjusted to take up remaining space */
    height: 100vh;
    padding-right: 20px;
    padding-left: 20px;
  }
  table {
    width: 100%;
  }
  .inner-container {
    height: 100vh; /* Subtract padding space */
  }
  .table-style {
    height: 85vh;
    overflow-y: scroll;
    position: relative;
    border: 1px solid #d9d9d9;
    border-radius: 4px;
  }
  .table-counts {
    height: 6vh;
  }
  tbody,
  td,
  tfoot,
  th,
  thead,
  tr {
    border-color: rgb(217 217 217);
    border-style: none;
    border-width: 1px;
  }
  td,
  th {
    border: none;
    padding: 14px;
  }
  /* Apply alternate colors to table rows */
  tr:nth-child(even) {
    background-color: #d4eaf7; /* Light gray background color for even rows */
  }
  tr:nth-child(odd) {
    background-color: #ffffff; /* White background color for odd rows */
  }
  tr.header-style {
    background-color: #5cb2eb;
    color: white;
    font-size: 14px;
  }
  input[type="search"] {
    box-sizing: border-box;
    border: 1px solid #ccc;
    border-radius: 2px;
    font-size: 16px;
    background-color: white;
    background-image: url(/src/lib/images/icon-search.svg);
    background-position: 140px 5px;
    background-repeat: no-repeat;
    padding: 4px;
    outline: none;
    width: 170px;
  }
  th {
    text-align: center;
    font-size: 16px;
    position: relative; /* Ensure the relative positioning for the container */
  }
  thead {
    position: sticky;
    top: 0;
  }
  /* scrollbar */
  ::-webkit-scrollbar {
    width: 5px;
    height: 5px;
  }

  ::-webkit-scrollbar-track {
    -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);
    -webkit-border-radius: 10px;
    border-radius: 10px;
  }

  ::-webkit-scrollbar-thumb {
    -webkit-border-radius: 10px;
    border-radius: 10px;
    background: rgba(255, 255, 255, 0.3);
    -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.5);
  }

  ::-webkit-scrollbar-thumb:window-inactive {
    background: rgba(255, 255, 255, 0.3);
  }

  /* Pagination styling */
  .table-pagination {
    height: 5vh;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  .button-primary {
    height: 36px;
    text-align: center;
    background-color: #5cb2eb;
    color: white;
    border-radius: 2px;
    border-bottom: #5cb2eb;
  }
  .button-primary:hover {
    background-color: white;
    color: #5cb2eb;
    border-bottom: #5cb2eb;
  }
  .multiselect-container {
    position: relative;
  }

  .filter-icon {
    cursor: pointer;
  }

  .open-dropdown::after {
    content: " ▲";
  }

  .options-container {
    max-height: 200px;
    overflow-y: auto;
    border: 1px solid #ccc;
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background-color: white;
    z-index: 1000;
  }
  .list-style {
    list-style: none;
  }
  .filter-button{
    display: flex;
    justify-content: space-between;
    
  }
  .header-align {
  display: flex;
  align-items: center;
  justify-content: space-between;
  width: 170px; /* Adjust this width as needed */
    }

    .ellipsis-fit {
    position: relative;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    width: fit-content;
    cursor: pointer;
    }

</style>
